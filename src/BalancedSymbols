import java.util.Stack;

// Assignment #: 11
// Name: Dylan Sanders
// StudentID: 1206657071
// Lecture: 4:30-5:45 TTH
// Description: Takes the input from Assignment 11 and checks to see if
//	all the symbols are matched up correctly


public class BalancedSymbols {

	public static String balancedSymbols(String input) {

		Stack<Character> myStack = new Stack<Character>();			//Creating Stack of Chars

		for(int i = 0; i < input.length(); i++) {				//Cycling through input
			if(input.charAt(i) == '(') {
				myStack.push(input.charAt(i));				//Pushes char if it is open parenthesis
			}
			if(input.charAt(i) == ')' && !myStack.isEmpty()) {		//Checks if current char is close parenthesis

				if(myStack.peek() == '(') {						//Pops matching open parenthesis
					myStack.pop();
				}
				else {
					return ") at the position " + i + " does not match.";		//Returns error if it does not match
				}
			}
			else if(input.charAt(i) == ')' && myStack.isEmpty()) {				//Returns error if myStack is empty
				return ") at the position " + i + " does not match.";
			}


			if(input.charAt(i) == '[') {							//Pushes char if it is open brace
				myStack.push(input.charAt(i));
			}
			if(input.charAt(i) == ']' && !myStack.isEmpty()) {		//Checks if current char is close brace

				if(myStack.peek() == '[') {
					myStack.pop();									//Pops matching open brace
				}
				else {
					return "] at the position " + i + " does not match.";		//Returns error if it does not match
				}
			}
			else if(input.charAt(i) == ']' && myStack.isEmpty()) {
				return "] at the position " + i + " does not match.";		//Returns error if myStack is empty
			}



			if(input.charAt(i) == '{') {
				myStack.push(input.charAt(i));					//Pushes char if it is open bracket
			}
			if(input.charAt(i) == '}' && !myStack.isEmpty()) {		//Checks if current char is close bracket

				if(myStack.peek() == '{') {
					myStack.pop();									//Pops matching open brace
				}
				else {
					return "} at the position " + i + " does not match.";		//Returns error if it does not match
				}
			}
			else if(input.charAt(i) == '}' && myStack.isEmpty()) {
				return "} at the position " + i + " does not match.";		//Returns error if myStack is empty
			}
		}

		if(myStack.isEmpty())
			return "Everything is matched!";		//Checks to see if myStack is empty and returns results
		else {
			char temp = myStack.pop();
			if(temp == '(')
				return ") is missing.";
			else if(temp == '[')
				return "] is missing.";
			else 
				return "} is missing.";			//Returns error if it does not match
		}
	}
}
